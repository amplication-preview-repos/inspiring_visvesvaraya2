/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  City as PrismaCity,
  Forecast as PrismaForecast,
  WeatherReport as PrismaWeatherReport,
} from "@prisma/client";

export class CityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CityCountArgs, "select">): Promise<number> {
    return this.prisma.city.count(args);
  }

  async cities<T extends Prisma.CityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityFindManyArgs>
  ): Promise<PrismaCity[]> {
    return this.prisma.city.findMany<Prisma.CityFindManyArgs>(args);
  }
  async city<T extends Prisma.CityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityFindUniqueArgs>
  ): Promise<PrismaCity | null> {
    return this.prisma.city.findUnique(args);
  }
  async createCity<T extends Prisma.CityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityCreateArgs>
  ): Promise<PrismaCity> {
    return this.prisma.city.create<T>(args);
  }
  async updateCity<T extends Prisma.CityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityUpdateArgs>
  ): Promise<PrismaCity> {
    return this.prisma.city.update<T>(args);
  }
  async deleteCity<T extends Prisma.CityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CityDeleteArgs>
  ): Promise<PrismaCity> {
    return this.prisma.city.delete(args);
  }

  async findForecasts(
    parentId: string,
    args: Prisma.ForecastFindManyArgs
  ): Promise<PrismaForecast[]> {
    return this.prisma.city
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .forecasts(args);
  }

  async findWeatherReports(
    parentId: string,
    args: Prisma.WeatherReportFindManyArgs
  ): Promise<PrismaWeatherReport[]> {
    return this.prisma.city
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .weatherReports(args);
  }
}
