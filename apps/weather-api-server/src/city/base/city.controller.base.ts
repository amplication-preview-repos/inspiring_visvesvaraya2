/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CityService } from "../city.service";
import { CityCreateInput } from "./CityCreateInput";
import { City } from "./City";
import { CityFindManyArgs } from "./CityFindManyArgs";
import { CityWhereUniqueInput } from "./CityWhereUniqueInput";
import { CityUpdateInput } from "./CityUpdateInput";
import { ForecastFindManyArgs } from "../../forecast/base/ForecastFindManyArgs";
import { Forecast } from "../../forecast/base/Forecast";
import { ForecastWhereUniqueInput } from "../../forecast/base/ForecastWhereUniqueInput";
import { WeatherReportFindManyArgs } from "../../weatherReport/base/WeatherReportFindManyArgs";
import { WeatherReport } from "../../weatherReport/base/WeatherReport";
import { WeatherReportWhereUniqueInput } from "../../weatherReport/base/WeatherReportWhereUniqueInput";

export class CityControllerBase {
  constructor(protected readonly service: CityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: City })
  async createCity(@common.Body() data: CityCreateInput): Promise<City> {
    return await this.service.createCity({
      data: data,
      select: {
        country: true,
        createdAt: true,
        id: true,
        latitude: true,
        longitude: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [City] })
  @ApiNestedQuery(CityFindManyArgs)
  async cities(@common.Req() request: Request): Promise<City[]> {
    const args = plainToClass(CityFindManyArgs, request.query);
    return this.service.cities({
      ...args,
      select: {
        country: true,
        createdAt: true,
        id: true,
        latitude: true,
        longitude: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: City })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async city(
    @common.Param() params: CityWhereUniqueInput
  ): Promise<City | null> {
    const result = await this.service.city({
      where: params,
      select: {
        country: true,
        createdAt: true,
        id: true,
        latitude: true,
        longitude: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: City })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCity(
    @common.Param() params: CityWhereUniqueInput,
    @common.Body() data: CityUpdateInput
  ): Promise<City | null> {
    try {
      return await this.service.updateCity({
        where: params,
        data: data,
        select: {
          country: true,
          createdAt: true,
          id: true,
          latitude: true,
          longitude: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: City })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCity(
    @common.Param() params: CityWhereUniqueInput
  ): Promise<City | null> {
    try {
      return await this.service.deleteCity({
        where: params,
        select: {
          country: true,
          createdAt: true,
          id: true,
          latitude: true,
          longitude: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/forecasts")
  @ApiNestedQuery(ForecastFindManyArgs)
  async findForecasts(
    @common.Req() request: Request,
    @common.Param() params: CityWhereUniqueInput
  ): Promise<Forecast[]> {
    const query = plainToClass(ForecastFindManyArgs, request.query);
    const results = await this.service.findForecasts(params.id, {
      ...query,
      select: {
        city: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        forecastTime: true,
        humidity: true,
        id: true,
        temperature: true,
        updatedAt: true,
        windSpeed: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/forecasts")
  async connectForecasts(
    @common.Param() params: CityWhereUniqueInput,
    @common.Body() body: ForecastWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      forecasts: {
        connect: body,
      },
    };
    await this.service.updateCity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/forecasts")
  async updateForecasts(
    @common.Param() params: CityWhereUniqueInput,
    @common.Body() body: ForecastWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      forecasts: {
        set: body,
      },
    };
    await this.service.updateCity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/forecasts")
  async disconnectForecasts(
    @common.Param() params: CityWhereUniqueInput,
    @common.Body() body: ForecastWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      forecasts: {
        disconnect: body,
      },
    };
    await this.service.updateCity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/weatherReports")
  @ApiNestedQuery(WeatherReportFindManyArgs)
  async findWeatherReports(
    @common.Req() request: Request,
    @common.Param() params: CityWhereUniqueInput
  ): Promise<WeatherReport[]> {
    const query = plainToClass(WeatherReportFindManyArgs, request.query);
    const results = await this.service.findWeatherReports(params.id, {
      ...query,
      select: {
        city: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        humidity: true,
        id: true,
        reportTime: true,
        temperature: true,
        updatedAt: true,
        windSpeed: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/weatherReports")
  async connectWeatherReports(
    @common.Param() params: CityWhereUniqueInput,
    @common.Body() body: WeatherReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      weatherReports: {
        connect: body,
      },
    };
    await this.service.updateCity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/weatherReports")
  async updateWeatherReports(
    @common.Param() params: CityWhereUniqueInput,
    @common.Body() body: WeatherReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      weatherReports: {
        set: body,
      },
    };
    await this.service.updateCity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/weatherReports")
  async disconnectWeatherReports(
    @common.Param() params: CityWhereUniqueInput,
    @common.Body() body: WeatherReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      weatherReports: {
        disconnect: body,
      },
    };
    await this.service.updateCity({
      where: params,
      data,
      select: { id: true },
    });
  }
}
