/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Forecast as PrismaForecast,
  City as PrismaCity,
} from "@prisma/client";

export class ForecastServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ForecastCountArgs, "select">): Promise<number> {
    return this.prisma.forecast.count(args);
  }

  async forecasts<T extends Prisma.ForecastFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForecastFindManyArgs>
  ): Promise<PrismaForecast[]> {
    return this.prisma.forecast.findMany<Prisma.ForecastFindManyArgs>(args);
  }
  async forecast<T extends Prisma.ForecastFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForecastFindUniqueArgs>
  ): Promise<PrismaForecast | null> {
    return this.prisma.forecast.findUnique(args);
  }
  async createForecast<T extends Prisma.ForecastCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForecastCreateArgs>
  ): Promise<PrismaForecast> {
    return this.prisma.forecast.create<T>(args);
  }
  async updateForecast<T extends Prisma.ForecastUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForecastUpdateArgs>
  ): Promise<PrismaForecast> {
    return this.prisma.forecast.update<T>(args);
  }
  async deleteForecast<T extends Prisma.ForecastDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ForecastDeleteArgs>
  ): Promise<PrismaForecast> {
    return this.prisma.forecast.delete(args);
  }

  async getCity(parentId: string): Promise<PrismaCity | null> {
    return this.prisma.forecast
      .findUnique({
        where: { id: parentId },
      })
      .city();
  }
}
