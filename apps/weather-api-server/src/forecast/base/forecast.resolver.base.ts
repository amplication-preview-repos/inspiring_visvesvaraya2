/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Forecast } from "./Forecast";
import { ForecastCountArgs } from "./ForecastCountArgs";
import { ForecastFindManyArgs } from "./ForecastFindManyArgs";
import { ForecastFindUniqueArgs } from "./ForecastFindUniqueArgs";
import { CreateForecastArgs } from "./CreateForecastArgs";
import { UpdateForecastArgs } from "./UpdateForecastArgs";
import { DeleteForecastArgs } from "./DeleteForecastArgs";
import { City } from "../../city/base/City";
import { ForecastService } from "../forecast.service";
@graphql.Resolver(() => Forecast)
export class ForecastResolverBase {
  constructor(protected readonly service: ForecastService) {}

  async _forecastsMeta(
    @graphql.Args() args: ForecastCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Forecast])
  async forecasts(
    @graphql.Args() args: ForecastFindManyArgs
  ): Promise<Forecast[]> {
    return this.service.forecasts(args);
  }

  @graphql.Query(() => Forecast, { nullable: true })
  async forecast(
    @graphql.Args() args: ForecastFindUniqueArgs
  ): Promise<Forecast | null> {
    const result = await this.service.forecast(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Forecast)
  async createForecast(
    @graphql.Args() args: CreateForecastArgs
  ): Promise<Forecast> {
    return await this.service.createForecast({
      ...args,
      data: {
        ...args.data,

        city: args.data.city
          ? {
              connect: args.data.city,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Forecast)
  async updateForecast(
    @graphql.Args() args: UpdateForecastArgs
  ): Promise<Forecast | null> {
    try {
      return await this.service.updateForecast({
        ...args,
        data: {
          ...args.data,

          city: args.data.city
            ? {
                connect: args.data.city,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Forecast)
  async deleteForecast(
    @graphql.Args() args: DeleteForecastArgs
  ): Promise<Forecast | null> {
    try {
      return await this.service.deleteForecast(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => City, {
    nullable: true,
    name: "city",
  })
  async getCity(@graphql.Parent() parent: Forecast): Promise<City | null> {
    const result = await this.service.getCity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
