/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WeatherReport } from "./WeatherReport";
import { WeatherReportCountArgs } from "./WeatherReportCountArgs";
import { WeatherReportFindManyArgs } from "./WeatherReportFindManyArgs";
import { WeatherReportFindUniqueArgs } from "./WeatherReportFindUniqueArgs";
import { CreateWeatherReportArgs } from "./CreateWeatherReportArgs";
import { UpdateWeatherReportArgs } from "./UpdateWeatherReportArgs";
import { DeleteWeatherReportArgs } from "./DeleteWeatherReportArgs";
import { City } from "../../city/base/City";
import { WeatherReportService } from "../weatherReport.service";
@graphql.Resolver(() => WeatherReport)
export class WeatherReportResolverBase {
  constructor(protected readonly service: WeatherReportService) {}

  async _weatherReportsMeta(
    @graphql.Args() args: WeatherReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WeatherReport])
  async weatherReports(
    @graphql.Args() args: WeatherReportFindManyArgs
  ): Promise<WeatherReport[]> {
    return this.service.weatherReports(args);
  }

  @graphql.Query(() => WeatherReport, { nullable: true })
  async weatherReport(
    @graphql.Args() args: WeatherReportFindUniqueArgs
  ): Promise<WeatherReport | null> {
    const result = await this.service.weatherReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WeatherReport)
  async createWeatherReport(
    @graphql.Args() args: CreateWeatherReportArgs
  ): Promise<WeatherReport> {
    return await this.service.createWeatherReport({
      ...args,
      data: {
        ...args.data,

        city: args.data.city
          ? {
              connect: args.data.city,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => WeatherReport)
  async updateWeatherReport(
    @graphql.Args() args: UpdateWeatherReportArgs
  ): Promise<WeatherReport | null> {
    try {
      return await this.service.updateWeatherReport({
        ...args,
        data: {
          ...args.data,

          city: args.data.city
            ? {
                connect: args.data.city,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WeatherReport)
  async deleteWeatherReport(
    @graphql.Args() args: DeleteWeatherReportArgs
  ): Promise<WeatherReport | null> {
    try {
      return await this.service.deleteWeatherReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => City, {
    nullable: true,
    name: "city",
  })
  async getCity(@graphql.Parent() parent: WeatherReport): Promise<City | null> {
    const result = await this.service.getCity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
